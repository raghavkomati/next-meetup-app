{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/i331567/Desktop/learn/React/nextExample/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from \"react\";\n\nfunction MeetupPage(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      title: props.meetupData.title,\n      image: props.meetupData.image,\n      address: props.meetupData.image,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://max:reactguru@cluster0.rb7ry.mongodb.net/meetups?retryWrites=true&w=majority', {\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const collection = db.collection('meetups');\n  const meetups = await collection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  console.log(meetups);\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://max:reactguru@cluster0.rb7ry.mongodb.net/meetups?retryWrites=true&w=majority', {\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const collection = db.collection('meetups');\n  const selectedMeetup = await collection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  console.log(meetupId, selectedMeetup);\n  return {\n    props: {\n      meetupData: {\n        title: selectedMeetup.title,\n        id: selectedMeetup._id.toString(),\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupPage;","map":{"version":3,"sources":["/Users/i331567/Desktop/learn/React/nextExample/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","Fragment","MeetupPage","props","meetupData","title","description","image","getStaticPaths","client","connect","useUnifiedTopology","db","collection","meetups","find","_id","toArray","close","console","log","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id","address"],"mappings":"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","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from \"react\";\n\nfunction MeetupPage(props) {\n    return (\n        <Fragment>\n            <Head>\n                <title>{props.meetupData.title}</title>\n                <meta name=\"description\" content={props.meetupData.description}></meta>\n            </Head>\n            <MeetupDetail\n                title={props.meetupData.title}\n                image={props.meetupData.image}\n                address={props.meetupData.image}\n                description={props.meetupData.description}\n            />\n        </Fragment>\n    );\n}\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect('mongodb+srv://max:reactguru@cluster0.rb7ry.mongodb.net/meetups?retryWrites=true&w=majority',  {useUnifiedTopology: true });\n    const db = client.db();\n    const collection = db.collection('meetups');\n    const meetups = await collection.find({}, { _id: 1}).toArray();\n    client.close();\n    console.log(meetups);\n\n    return {\n        fallback: false,\n        paths: meetups.map(meetup => ({\n            params: {\n                meetupId: meetup._id.toString()\n            }\n        }))\n    }\n}\n\nexport async function getStaticProps(context) {\n    const meetupId = context.params.meetupId;\n    const client = await MongoClient.connect('mongodb+srv://max:reactguru@cluster0.rb7ry.mongodb.net/meetups?retryWrites=true&w=majority',  {useUnifiedTopology: true });\n    const db = client.db();\n    const collection = db.collection('meetups');\n    const selectedMeetup = await collection.findOne({_id: ObjectId(meetupId)});\n    client.close();\n\n    console.log(meetupId, selectedMeetup);\n    return {\n        props: {\n            meetupData: {\n                title: selectedMeetup.title,\n                id: selectedMeetup._id.toString(),\n                address: selectedMeetup.address,\n                image: selectedMeetup.image,\n                description: selectedMeetup.description\n            }\n        }\n    };\n}\n\nexport default MeetupPage;"]},"metadata":{},"sourceType":"module"}